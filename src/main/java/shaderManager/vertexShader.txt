#version 150

in vec3 position;
in vec2 textureCoords;
in vec3 normals;
in vec4 colors;


out vec2 pass_textureCoords;
out vec4 pass_color;
out float pass_useImage;
out vec3 surfaceNormal;
out vec3 tolightVector[4];
out vec3 toCameraVector;
out float visibility;
out float pass_isSelected;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform float useFakeLighting;
uniform float useImage;
uniform float isSelected;

const float density = 0.003; // higher value makes 0.0 value to be reached quicker in a linear transition
const float gradient = 6; // higher value makes transition beetwen 1.0 to 0.0 visibility smaller
uniform vec4 planeClipping;

void main(void){
	// OpenGL convention applied: column major order (readen right to left to apply vec4 * transformationMatrix * viewMatrix * projectionMatrix)
	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	
	gl_ClipDistance[0] = dot(worldPosition,planeClipping); // specific to clipping plane tuto
	
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCam;
	pass_textureCoords = textureCoords;
	pass_color = colors;
	pass_useImage = useImage;
	pass_isSelected = isSelected;
	vec3 actualNormals = normals;
	if(useFakeLighting > 0.5){
		actualNormals = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormals,0.0)).xyz;
	for(int i=0; i<4; i++){
		tolightVector[i] = lightPosition[i] - worldPosition.xyz; //calculate light vector to active point to render
	}
	
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility =  clamp(visibility,0.0,1.0);//
}