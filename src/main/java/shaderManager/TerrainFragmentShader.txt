#version 150 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 tolightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void)
{
	vec4 blendMapColour = texture(blendMap,pass_textureCoords);
	
	float backTextureAmout = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmout;
	vec4 rTextureTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureTextureColour = texture(bTexture, tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureTextureColour + gTextureTextureColour + bTextureTextureColour;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(tolightVector);
	
	
	float nDot1 = dot(unitNormal,unitLightVector);
	float brightness = max(nDot1, 0.3);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitVectorToCamera;
	
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	
	out_color = vec4(diffuse,1.0) * totalColour + vec4(finalSpecular,1.0);
	out_color = mix(vec4(skyColour,1.0),out_color, visibility);
	
}